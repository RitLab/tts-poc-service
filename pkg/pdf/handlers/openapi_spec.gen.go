// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yY32/bNhDH/xXutkfZctcUBfS0rF0wDxhgNNleij7Q4klmKpEseXLtBf7fB5KSK8WC",
	"k3Vt6mF+s/nj7su7D8kT7yDXtdEKFTnI7sDlK6x5+PlqxemVVoQbeoMfGnTkW43VBi1JDGNCs9TK/8YN",
	"r02FkMGvWFWafdS2EpAAbY1vdGSlKmG327fo5S3mBLtk6MoZrRwe+hKc+GGrbsg0NPSfrzgxb+wx3kf1",
	"RC0LURw6LGQVxBXa1pwgg6VU3G4PXCWwmWhu5CTXAktUE9yQ5RPiZTCz5pUUnPwEix8aaVHAzovZ/8ve",
	"Rl/vRgT+Yq22h9pqdI6XOIxGo3BjMCcUDMO0g6Ak4KqmHM5acjGxbdrHotiXGWYne+9jgn/TUi1EcSWr",
	"qPQwpuGHJKzdV4vu3gi3lm9hLNpuVP21LDv1TwxEAu9x67u/ElzR/uiamzxH5x4JmYujv3uQlWOQXDd1",
	"za38C0934+0lfolzynXG/tVhdUPun4ppbDVUsiIyLkvTSqr3U9JTpxslPlfQn2hlsf1/7Rc/WKpCe2u5",
	"VsTzmOuay8pblVTxpXt2Mbv4qfRt01zXkIDitbfyJnb74Al0uZUmXqpwyZz0KWKXizkrtGXGar/PpCrZ",
	"4vXV1AdNUkjh4vWVHwUJrNG6OP3ZdDadeavaoOJGQgbPp7Ppc0jAcFqFtafcyJTIpf7WnOTx5gtZ0/HG",
	"97njXs9cQNa/qiHGBx39rMW2WzmqMKtuKpKGW0p9nicdh6hyLXxG+qd+O+2mPZyNqWQePKZGFCGpsSzx",
	"Y3+wWEAG36ef6pa0LVrSkYolJGYYUz+KfZS0YpdztuQOBdOKNabSXKBg/uzpJ55sg4GEuMWC4B9ns3vL",
	"7Yu+dbEg+gzR7TYeUd0ex+z39vzcJXDxBVXEgmLE71yFzcH2AU3gxVP4vUa7Rsu6/qQ9LLddAjsGfdce",
	"4Vst1cS0l8covoM65NT4HYgbiYnvZ0YUzHtme4VPimv/tjljegzTYbakIs20wvBvSK2T5QPU9uvPU4O2",
	"r20sQLI8M/ufYXaQrXuUdsXqA6j2a/iTY7UvbpSEriBfdMQ2odb6Ntwefmyc6T1K7yB9NwflQazxuhr3",
	"OMd/hLG9h6CTK3Y/SRuJUpQfMdaWtUtmpNnl/IkZjs8IZ3KPkdtL12hhuw6f1MeJHX52nxquQ3Uj0YkD",
	"vnWpcMb1Mbjey1Wc7cJ4B9nb9oFp/6p0t9KOFK9xBwmsuZV82dLVdYSnKix4UxFkUOmcV74rezl7+cJb",
	"f7f7OwAA//9sNRZHqRgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
