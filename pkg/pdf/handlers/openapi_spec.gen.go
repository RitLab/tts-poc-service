// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTU/jSBD9K97aPRo7LCAkn5YVg8RII0WA5oI4dOyy02B393SVI6Io/31UbScTBytw",
	"GM0wEjen6+v1q1edWkFuG2cNGibIVkD5HBsVPj95b718OG8detYYjhskUhXKJz6rxtUIGbQGnx3mjEWE",
	"ISwGXjqxEHttKljHQHVbDaNmqjjy+K1F4pcB6xjEpj0WkN130fG2+sPW384eMWcp8NlqMy3KK113SIe4",
	"y82xZmy6E+sbxYJDG+WXY5j7A+W9Wr6A1GUcQ3Krqw2ScSBvLP+ES/E8zEzI1/mOYmnzHIne2EjqvP96",
	"tR+HGnHHdIPkrKGR6xeK1cvT1tdDIHNmR1ma1to8JWwTsq0pRlHtlV+PAPqKXpfL99ERcdamtJImt4ZV",
	"zuHmjdI1ZOA112pGx6eT0/8qOUty20AMRjWS5aYzC5QCKffasbYGMriISAt10cX0Oiqtj5y30kltqmh6",
	"eZXIZTQHaqeXV+IFMSzQUxd+nEySiWS1Do1yGjI4SSbJCcTgFM8DTalyOmWm9NFqc+SKMjBpKeAXPpVg",
	"uS4gG45iRw4S/2+L5ebaaEJY09asnfKcCvlHG3GgyW0h1O4Obh9218+kc7XOQ8lUsAiv3eslvv94LCGD",
	"v9Mfz1vav23pAFzox5BKsUeuKCOpHG0Rwm6T2bcYut7JPOD7dzLZu90uxkeS5Ks3YtwdoRGI/VBHX/op",
	"XMdw+hOrd0//SN1rs1C1LqKb/tVex3D2K+reol+gjzb2GKhtGhnR/W5pwzayBsOv4LlVLenqFdXuPtvv",
	"TbS72MYI0tWHZv8YzQ66NVTpIvxVHdbp8O/svSl1iG6EmM7hd6t1sxd9KPWQUvd61UVT8CfI7vvFbbut",
	"reaWWFaVtWwXyms169W1MYQVEEvV1rJo1TZXtZiy88n5mWR/WH8PAAD//yjUsP6TDAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
