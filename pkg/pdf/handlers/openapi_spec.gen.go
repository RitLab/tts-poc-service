// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yY32/bNhDH/xXutkfZctcUBfS0rF0wDxhgNNleij7Q0klmSpEseXLtBf7fB5KSJ9WC",
	"k21N4mF+k/nj7su7D8kz7yDXtdEKFTnI7sDlK6x5+Hyz4vRGK8INvcNPDTryrcZqg5YEhjGhWWjlv3HD",
	"ayMRMvgZpdTss7aygARoa3yjIytUBbvdvkUvbzEn2CVDV85o5fDQV8GJH7bqhkxDQ//5ihPzxh7ifVRP",
	"1LIoykOHpZBBXKltzQkyWArF7fbAVQKbieZGTHJdYIVqghuyfEK8CmbWXIqCk59g8VMjLBaw82L2v7L3",
	"0deHEYE/WavtobYaneMVDqPRKNwYzAkLhmHaQVAScLKphrOWvJjYNu1jUezLDLOTvfcxwb9ooRZFeSVk",
	"VHoY0/AhCGv3aNHdG+HW8i2MRduNqr8WVaf+iYFI4CNuffcjwRXtj665yXN07oGQuTj6m3tZOQbJdVPX",
	"3Io/8HQ33l7i1zinXGfsXx1WN+T+rpjGyqGSFZFxWZpKoT5OSU+dblTxTwX9jlaU2//XfvGDhSq1t5Zr",
	"RTyPua65kN6qIMmX7sXF7OKHyrdNc11DAorX3sq72O2DV6DLrTDxUoVL5oRPEbtczFmpLTNW+30mVMUW",
	"b6+mPmiCQgoXb6/8KEhgjdbF6S+ms+nMW9UGFTcCMng5nU1fQgKG0yqsPeVGpEQu9bfmJI83X8iajje+",
	"zx33euYFZP2rGmJ80NGPuth2K0cVZnFjpMjDvPTWxQohFhf+6zuLJWTwbfpX9ZG2pUc6UneE8A4j40ex",
	"z4JW7HLOltxhwbRijZGaF1gwf4L000e2wZDPuFHCyr+fzR5HdLsZR1S3hyr7tT0FdwlcfEUVsSwY8TtX",
	"AXG2D2gCr57C7zXaNVrW9SftkbftEtiR5Lv2IN5qoSamvQJGIRxUE8corBtJwnBLqT9tJt1piCrXhT8X",
	"+rVHO+2mLRF6wfBagvgHBWMgbiQmvp+ZomTeM9srfFJc+3fGGdNjmA6zJRRpphWGX0NqnajuobZfRZ4a",
	"tH1tYwES1ZnZ/wyzg2x9QWlXct6Dar8SPzlW++JGSejK6kVHbBMqpufh9vAvw5neo/QO0ndzUB7EGq+r",
	"VI9z/FsY23vOOTWWe9JGohTlR4y1Ze2SGWl2OX9ihuNjwJncY+T20jVa2K7DH+PjxA7/PJ8arkN1I9GJ",
	"A567VDjj+hBcv8hVnO3CeAfZ+/aZaP82dLfSjhSvcQcJrLkVfNnS1XWEBycseSMJMpA659J3Za9nr195",
	"6x92fwYAAP//eMz0Qm8YAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
