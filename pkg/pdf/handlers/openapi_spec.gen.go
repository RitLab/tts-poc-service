// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xX30/bPhD/V/L1d49pUgYIKU9jYkhMmlQB2gviwU0uqSGxPftStav6v09nJ13SRoVN",
	"DJjGW+L74Y/vPr47r1iqKq0kSLQsWTGbzqDi7vOTMcrQhzZKg0EBbrkCa3kB9AkLXukSWMJqCQsNKUIW",
	"gDMLGS41SSwaIQu2Dpkt66JvNeXZyMC3GizuGqxDRjJhIGPJjbcON7vfbvTV9A5SpA0+KyEnWX4uSo+0",
	"jztvlwVC5VeUqTgSDiG5We5ACNlipLgWo1RlUIAcwQINHyEvnPmclyLjSAYboIS6ccKN4cudY3gUQ+iv",
	"RNGiHwb/ByHfw5LET+Br4LjM+x88c52mYO0jSWa99n8PcmUfSa7qquJGfIdJlj9znIdisxfiJVitpB3g",
	"Q8aR766qGnWN20FrnAUIi+FrtgVgPQDpGu2vgqlN2UcyQ9Q2ieNSyPsIVWRVLbPfBfQVjMiX/9Z9IWUh",
	"c0XeUiWRpz7XFRcleRVY8qk9OBoffShoLUpVxUImeUVeLr2YgpeBTY3QKJRkCTsNrKAUBaeTiyBXJtBG",
	"0T0TsggmZ+cRBU2gS+Hk7Jy0WMjmYKw3P4jG0Zi8Kg2Sa8ESdhiNo0MWMs1x5s4ecy1iRBvfKSFHurl5",
	"yjr8lDdOWC4ylvSLuA8OWPyosmV7bJDOrKpLFJobjCnJo5aEIFOVUTq6Jb8xu24qs9alSN2WMWGhuPq+",
	"R7rvDOQsYf/HPxtj3HTFuAfO5aMfSpIHOssD2jnYIGTdJKOpwWXdXyeH7/14vHW6LsY7S85Xj8TYvaoD",
	"EJuSG3xpauQ6ZEdPuLsfGgb2vZDuAgSXTb9fh+z4Ofa9AjMHE7TysCmIy51sCYkqUBLcn9PcsNaK4gHW",
	"dpv3ayNtF9tQgETxxtm/hrO9bG2xtO30D1C1OwC9Oq52wQ0yoZ1mJi1ja9eoXoa3u5PaG3v3sreXvmsa",
	"SHsUnrupbj9/+5PfayNwH91AdLzCSxfc9uH1Rtd9dN3Klbe2Tt+y5KZ542weNquZskjT9poGZG4Enzbs",
	"agXutQQ5r0t6k5Qq5SWJkpPxyTF5v13/CAAA///E7ilOkBEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
