// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package handlers

import (
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Convert text to speech
	// (POST /api/tts)
	TextToSpeech(ctx echo.Context) error
	// Create summarize based on audio file
	// (POST /api/tts/audio-summarize)
	AudioSummarize(ctx echo.Context) error
	// Create transcript based on audio file
	// (POST /api/tts/audio-transcript)
	AudioTranscript(ctx echo.Context) error
	// Join mp3 file into one file
	// (POST /api/tts/join)
	JoinMP3Files(ctx echo.Context) error
	// Convert text to speech and response with sound
	// (POST /api/tts/read)
	ReadTextToSpeech(ctx echo.Context) error
	// Create summarize based on video youtube URL
	// (POST /api/tts/video-summarize)
	VideoSummarize(ctx echo.Context) error
	// Create transcript based on video youtube URL
	// (POST /api/tts/video-transcript)
	VideoTranscript(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// TextToSpeech converts echo context to params.
func (w *ServerInterfaceWrapper) TextToSpeech(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TextToSpeech(ctx)
	return err
}

// AudioSummarize converts echo context to params.
func (w *ServerInterfaceWrapper) AudioSummarize(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AudioSummarize(ctx)
	return err
}

// AudioTranscript converts echo context to params.
func (w *ServerInterfaceWrapper) AudioTranscript(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AudioTranscript(ctx)
	return err
}

// JoinMP3Files converts echo context to params.
func (w *ServerInterfaceWrapper) JoinMP3Files(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.JoinMP3Files(ctx)
	return err
}

// ReadTextToSpeech converts echo context to params.
func (w *ServerInterfaceWrapper) ReadTextToSpeech(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ReadTextToSpeech(ctx)
	return err
}

// VideoSummarize converts echo context to params.
func (w *ServerInterfaceWrapper) VideoSummarize(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VideoSummarize(ctx)
	return err
}

// VideoTranscript converts echo context to params.
func (w *ServerInterfaceWrapper) VideoTranscript(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VideoTranscript(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/tts", wrapper.TextToSpeech)
	router.POST(baseURL+"/api/tts/audio-summarize", wrapper.AudioSummarize)
	router.POST(baseURL+"/api/tts/audio-transcript", wrapper.AudioTranscript)
	router.POST(baseURL+"/api/tts/join", wrapper.JoinMP3Files)
	router.POST(baseURL+"/api/tts/read", wrapper.ReadTextToSpeech)
	router.POST(baseURL+"/api/tts/video-summarize", wrapper.VideoSummarize)
	router.POST(baseURL+"/api/tts/video-transcript", wrapper.VideoTranscript)

}
