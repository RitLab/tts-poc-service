// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXUW/jNgz+Kxq3hw1w7HTt4QA/rRtuWIYdULQF9nB3D6rFJOpkUZPorkWR/z5Isr24",
	"SXp9KIoOd28KaYofP34glXtoqHVk0XKA+h5Cs8ZWpuM778nHg/Pk0LPGZG4xBLnCeMRb2TqDUENn8dZh",
	"w6gEprAC+M5FT2Cv7Qo2BQTTraZRV1LNPP7dYeDdgE0B0ac9Kqg/5OhizP5p/J6urrHhmOB30vb92fGv",
	"2mSkU9zLwawZ22wh30qOOLSV/m4f5t4gvZd3O5DyjYeQnKnlK0By0TUNhvDENob89Tef7cZjbbjkcN43",
	"dSerkTZpQOFSdiZWrBUUoDA0XjvWZKGGP6RddXKFoiGFYkle8BpFcIjNWnyP5aosxEdA+xGS851dGR3W",
	"0aZVb1tYRRaDlvaHEoqtClO6XXLxlqdM/IbGkPiTvFGfZyOFH6QiOLIBd7lQkuWutfNmimTN7EJdVUbb",
	"v0qmMlBn1V5ID9LvsWwK0HZJMUFDlmWTq26lNlCD12zkVTg6mZ/8tIq2sqEWCrCyjbecZ3esa9qvUxF0",
	"BCtOzxaJ/YbsTazIrkSkRjD13Yu9YM2prku85RnT7CL39fRsAQXcoA/50qNyXs5jLnJopdNQw3E5L4+h",
	"ACd5nbiqpNMV58HlKOstcikjsIXqk1xSTgG5aRj4Z1J3AwdoU5h0zugmBVbXISIYZmE8fedxCTV8W/03",
	"LKt+UlZbck8ET7mJAIS2ruMtZlKJ2xJi32HSVNZKKujH+fx5MfY63AMyzikRWX3QLuHHoAJOnhFPXi17",
	"kCzsjTRaiZHRAt68RN4L9DfoxeAvIHRtGydxDb9kMT+gJn006K+6Jm0Pi3Cylx4TYdsZ1k56ruJCmA0D",
	"Am1DSufBOe6OPuyyXwud0lS1DvMkeBobE1x7SIl+0bpjEZOKEdwTlHv0Usrt15t43++jL1in025pyyTI",
	"Yvq1K9aZU8vHBTs+X16ZYEdchwTr1PKrYP83gh279YhgPUp1WKznKNXrXfPiH81rMbzZXm7jD+/+r9v+",
	"Oba9kFaN9Gy3NF0e0nUB6g/98318s9+vKXB8Pm/i21Z6La/6aTg4pn+GDDXSRFf9dv72Tbz90+bfAAAA",
	"//89ZquZog8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
