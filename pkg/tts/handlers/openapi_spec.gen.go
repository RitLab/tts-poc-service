// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xVwU4bMRD9FXfaQyuZ3VBASHsqragaqQcESD0AB2c92TX12q49mwah/Hs13iRNCIgL",
	"qlqpN++OZ96bN8/2PdS+C96howTVPaS6xU7l5WmMPvIiRB8wksH8u8OUVIO8xLnqgkWooHc4D1gTaoE5",
	"TQLdBY4kisY1sJCQbN9sZ02U3ov4o8dEuwkLCRwzETVUV0O2XKPfrPf7yS3WxACXlM6X1XZYW+UyuMap",
	"6i1BBUaDBI2pjiaQ8Q4q+Kpc06sGRe01iqmPgloUKSDWrXiLRVNIcQ3oriEHT11jTWr5n9HLf2OnvcNk",
	"lHtXgNzoNcPtaEI4p21NvqC1Xnzz0epXz4qS05+UIgXvEu5q0Ue7jdkShVSVpTXue0G+SL53+llwLrOL",
	"zbuMm3pGqL0jVecGnep417khqyYJ5EAC4vC9fzg6/NB0ytii9h03sD2YE5EMcxUnZ+Msc+3djBtyjWAN",
	"BPnlmFh0MpTbusQ57ZHfuxgGeHI2BgkzjGkoul+MihFj+YBOBQMVHBSj4gAkBEVtlqqk4VgEP5iKZVRM",
	"aqyXAJd+KA+DOJjoo9d3q+7R5TQVgjV1TixvE6OvThqv3kScQgWvy99HsVyew3LD01nabV2YgDAu9LSh",
	"Sm5vc1QUe8yzGwyRG3o/Gr0sx6XZHiH52VgUrOiDUYm4TpJw+IJ8hovrESZjN1PWaLFWVMLRn8C9wDjD",
	"KFZxCanvOhXvoIJPg5EfSJM3sffKiEo/bcBzVPrvNaH4aagVq8vkvx//XT8K5fRans2x5uIpl0tQXS3f",
	"lvygVGV53/pEfPMvSr5fJcxUNGpih5GvgtvPsvW1shyqjkfHRwxws/gVAAD//xrYQ36lCAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
