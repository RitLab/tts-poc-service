// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWUW/jNgz+KzptDxvg2OnawwF+WjfcsAw7oGgL7OHuHliLcdTJkibRXYoi/32gZHtx",
	"k976UBQDtjeFNMWPH7+QepCN67yzaCnK+kHGZoMdpOP7EFzggw/OYyCNydxhjNAiH3ELnTcoa9lb3Hps",
	"CJXAFFZIuvfsiRS0beWukNH07TzqBtQi4B89RjoM2BWSfTqgkvXHHF1M2T9P37ubW2yIE/zitP1wcfqT",
	"NhnpHPd6NGvCLltc6IAYh7YQ7g8gFHK7cOD1onEKW7QL3FKABUGbwu/AaAXEARNQRj1cAiHA/UEZGcUx",
	"9Fd902CMzyQ85q/f/CNvXyLsmuLlQP9BVgM2dUvhGnrDLGklC6kwNkF70s7KWv4Ktu2hRcEMibULgjYo",
	"okdsNuIbLNuyEJ8k2k8yOd/b1ui4YZtWg21llbMYNdhvS1nsVZjSHYiIcEtzJn5GY5z4zQWj3rxMCx8x",
	"mFI+SV/0zkY85E8BwaG1D2aOfkPkY11VRtvfS3JldL1VR5v6KP0Ry66Q2q4dJ2icJWgyUx1owwVqMnAT",
	"T86WZ9+3bCsb18lCWuj4lsvs5rrmPT4XUTNYcX6xSh1rnL3jimwrmBpBbug49480pbqucUsLcourrIXz",
	"i5Us5B2GmC89KZflknM5jxa8lrU8LZflqSykB9okrirwuqI8lrzLGmUugYGt1JDk2uUUMjcNI/3g1P3I",
	"AdoUBt4b3aTA6jYygnHS8enrgGtZy6+qv0dhNczBau8vkgiec8MAhLa+pz1mUon7EqLQY9JU1koq6Lvl",
	"8mUxDjo8ApLnoWBWH7VLhCmokGcviCcvjiNIVjb94cTEaCHfvkbeKwx3GMToL2Tsu44nfi1/zGJ+RE36",
	"aNRfdeu0fVqEs63zJRF2vSHtIVDFi2cxDgi0jVM6D9tpRw1h18Mq6ZV2VecxT4LnsTHDdYQU9ovOnwpO",
	"KiZwz1DuyWspd1iJ4sOww/7DOp13S1tywllMv+ZiDQjqabFeIqh/79QUf2raiHEFvt4AHZ9e/w/Plxie",
	"Aqya6Nlvabo8puuirD8Or6HpCfSwcZH4NbLjpwIEDTfDNBwd8/eocQ0YdtXvlu/e8u2fd38FAAD//2jc",
	"zRTPDAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
