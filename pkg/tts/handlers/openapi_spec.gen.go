// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYUW/bNhD+Kyy3hw2QJWdJUUBPy4oOy7ACQWJgD20fzuJZZkaRLHnK7AX+7wMpWZFs",
	"OU27NMjQPEURxbvvvvvIu/MNL0xljUZNnuc33BdLrCA+ntZCmsu6qsDJf/ACP9boKSxYZyw6khg/W0iF",
	"8a9xFRDP+VxqcGuecFpb5Dn35KQuecJXEwNWTgojsEQ9wRU5mBCU0cw1KCmAwgaHH2vpUPDNZpPc/pe/",
	"a3x96Cyb+RUWxDfJHlZvjfa4D1YAwf5bU5OtY2i4gsqqiHprbC+QAGoHwOYQpJkD7QsnLf0P+OuD/e8E",
	"UmftSxl845xx+84q9B5KHHqrNa4sFoSCYdy25zPhXtXlcNccxMS1iRkD2ecu7k4672Ms/m6kfnt+/KtU",
	"DdL9RMcHSVj5r5byzgg4B2s+JgE/iv6yLgr0/p6E++brF5/k7S7CZuQPngsFOmZL4AJqFViSgidcYCMq",
	"aTTP+R+gyxpKZIEhtjCO0RKZt4jFkv2AaZkm7D1H/Z7HxTe6VNIvwzsp2ndnWhiNXoL+MeVJL8Lobk9E",
	"hKsdof+GShn2p3FKvPgqpza6PEjf553U2qkh+iWR9XmWKan/Ssmk3tRafNmJDa+kXpjgoDCaoGiYqkCq",
	"EKAkBXN/dDI9+bkM79LCVDzhGqpg5aJZDnENc3zKvAxg2en5WcxYYfR1iEiXLFDDyLQZD/kjSTGuGa5o",
	"QmZy2Wjh9PyMJ/wanW+MHqXTdBp8GYsarOQ5P06n6TFPuAVaRq4ysDKjpi5a02g0cAkB2JloncxM44I3",
	"SUNPvxix3nKAOm4Da5Us4sbsygcE21Ibnr53uOA5/y67rcVZW4iz3hGJBA+5CQCY1LamHjMxxL6EyNUY",
	"NdVoJQb003T6sBhbHY6ADPchC6zupIu5blPCTx4QT1M4RpCc6XjgWMdowl8+ht9LdNfo2HY9abuLNc/5",
	"60bMO9TEj7b6yyBU58ltR3JQj8M26E5FVrUiacFRFqrQZHtboC6MkM3N2xWsdtusrSvBSVZZbK6F+1Ez",
	"3kyOUPXaIRCyLli2cKZi0ScLgFgH/FElfqDBHMt1UxjZ27bufcva3s3lHDwKZnQvn2NK77WOd0t91u8x",
	"n5bW9zv/w2K/jfcpqX1kHHiW+z3k3svmJ/V+ZaQ+rPHBPPGEBD7ANcJRWGeVPf58CR89Vk/yLNtOtsNs",
	"SU2GGY0jYnUI4rBYLxDE0+2H2d+Slmw73DzeTbodqp/b4odoixlo0dHTT2k07qM5z/N37ZzbDbc3S+Mp",
	"zJmbMASCkzBvb8PtwvCXBmUKUGEpfzV99TJY/7D5NwAA//9Gc+IjKhUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
