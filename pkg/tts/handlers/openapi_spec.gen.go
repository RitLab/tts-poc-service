// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZUW/bNhD+Kyy3hw2QLWdJUUBPy4oOy9ACQeJtD20ezuJZZiaRLHny7AX+7wMpWZFs",
	"OXXTJHPRPNUVRd533308fmJueKoLoxUqcjy54S6dYQHh52kppL4siwKs/Bcv8GOJjvyAsdqgJYnhtanM",
	"MfyrbQHEEz6RCuySR5yWBnnCHVmpMh7xxUCDkYNUC8xQDXBBFgYEWVhmDrkUQH6CxY+ltCj4arWKbv+X",
	"vK9iXTUr68k1psRX0RZWZ7RyuA1WAMH2U12SKUNquIDC5AH1erGtRDyoDQCrXZDGFpRLrTT0FfDXBvvl",
	"BFKz2n0ZfGOtttvBCnQOMuxGKxUuDKaEgmGYthUz4i4vs+6sCYiBrQvTB7LNXZgdNdH7WPxdS/Xu/PhX",
	"mVdItwsdfkjCwj1ayZtFwFpY8j4JuF70l2WaonN7Eu6qt198kre7CBuT27kvclChWgKnUOaeJSl4xAVW",
	"opJa8YS/BZWVkCHzDLGptoxmyJxBTGfsBxxmw4h94Kg+8DD4RmW5dDP/TIr62ZkSWqGToH4c8qiVYQi3",
	"JSLCxYbQf8M81+wvbXPx4lF2bQi5k77P26mlzbvoZ0TGJXGcS/X3kPTQ6VKJ++7YP6XAPY6MGkS3lFKZ",
	"kthSl1ROkP1x8bZTjDXMenyY6uJRuPbQrvbI7AAOmABpjwPma2X7sI4j/0iqqfarploRpFWAAmTuc5SU",
	"w8QdnYxOfs78s5ozBYVf5aIa9rl163DKnPQI2en5WWhHqVZzn4nKmN/3jHTdznxzIkkhmTEuaEB6cFk1",
	"utPzMx7xOVpXLXo0HA1HPpY2qMBInvDj4Wh4zCNugGaBoxiMjKkyfUZXuvEcggd2JuogY12F4FXd0NEv",
	"WizXHKAK08CYXKZhYnztPIK1j/S/vrc45Qn/Lr41mnHtMuNW/w8Ed7nxAFgl1FtmQoptFZEtMciq0khI",
	"6KfR6GEx1vrrAekPe+ZZ3SgXs82kiJ88IJ7KFfUgOVNhz7GG0Yi/fIq4l2jnaNl6PKo725In/HUl5g1q",
	"wktr/cXgrefgthvu1GPX49+pyKLMSRqwFHuLNVh3CVSpFrKyFY0bq6eNa9Pkg8SFwaot7EdN/5dSD1Wv",
	"LQIha5JlU6sLFmIyD4g1wJ9U4ju+nvpqXbk+9q42dd+ytjdrOQGHgmnVqmef0lsH0d1SH7dPrMPS+rbr",
	"2C3223wPSe095uJZ7nvIvVXNT+r9Wku1W+Odj+UDEngHVw9HfpwV5vjzJXz0VJ7kWbaNbLvVkoo00wp7",
	"xGoRxG6xXiCIw/XD7B9JM7b+cn+6Trq+MXq2xQ9hixko0dDTLmlHp3P/abyPXe7eWDySYPsvfPZ2vt37",
	"h6cT7o7bnOdWej/DGzTZKWaPZPfxvRv3Po8p2i+xsP+rbJ+d68M51z7h+rlhMceT9/XtaXMhejPTjhQU",
	"uOIRn4OVMKmd53qg+yeLXKeQ+6Hk1ejVS7/61eq/AAAA//+QX3mOcx0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
